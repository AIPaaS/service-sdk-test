apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

compileJava.dependsOn clean

sourceCompatibility = 1.7

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
    
checkstyleMain {
    ignoreFailures = false
    reports {
        include ( '**/*.java')
        xml {
           destination = new File(rootDir, "reports/checkstyle/${project.name}.xml" )
        }
    }
    configFile = new File(rootDir, 'checkstyle.xml')
}

checkstyleTest {
	ignoreFailures = false
	reports {
		include ( '**/*.java')
		xml {
			destination = new File(rootDir, "reports/checkstyle/${project.name}_test.xml" )
		}
	}
	configFile = new File(rootDir, 'checkstyle.xml')
}

findbugsMain {
	ignoreFailures = true
	reports {
        include ( '**/*.java')
        xml {
           destination = new File(rootDir, "reports/findbugs/${project.name}.xml" )
        }
    }
	effort = "max"
	reportLevel = "high"
	omitVisitors = ["FindNonShortCircuit"]
}

findbugsTest {
	ignoreFailures = true
	reports {
        include ( '**/*.java')
        xml {
           destination = new File(rootDir, "reports/findbugs/${project.name}_test.xml" )
        }
    }
	effort = "max"
	reportLevel = "high"
	omitVisitors = ["FindNonShortCircuit"]
}

pmdMain {
	ignoreFailures = true
	reports {
        include ( '**/*.java')
        xml {
           destination = new File(rootDir, "reports/pmd/${project.name}.xml" )
        }
    }
}

pmdTest {
	ignoreFailures = true
	reports {
        include ( '**/*.java')
        xml {
           destination = new File(rootDir, "reports/pmd/${project.name}_test.xml" )
        }
    }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    maven{ url "http://10.1.228.199:18081/nexus/content/groups/public/"  }
	
}

sourceSets {
    main {
        java { srcDirs = ['src/main/java']}
         resources {
               srcDirs = ['src/main/resoruces']
         }
    }
	test{
		java { srcDirs = ['src/test/java']}
		resources {
			  srcDirs = ['src/test/resoruces']
		}
   }
}

ext {
	moduleName="ipaas-sdk-test";
	moduleVersion="0.1-SNAPSHOT"
	publishUserName = "devadm"
	publishUserPassword = "Devadm@1212"
	publishURL="http://10.1.228.199:18081/nexus/content/repositories/snapshots/"
	builtBy="gradle 2.3" 
} 

group = 'com.ai'

dependencies{
	compile 'com.ai:ipaas-common:0.1-SNAPSHOT'
	compile 'com.ai:ipaas-uac:0.1-SNAPSHOT'
	compile 'com.ai:ipaas-ccs:0.1-SNAPSHOT'
	compile 'com.ai:ipaas-mcs:0.1-SNAPSHOT'
	compile 'com.ai:ipaas-dss:0.1-SNAPSHOT'
	compile 'com.ai:ipaas-mds:0.1-SNAPSHOT'
	compile 'com.ai:ipaas-txs:0.1-SNAPSHOT'
	compile 'com.ai:ipaas-dbs:0.1-SNAPSHOT'
	
	testCompile 'junit:junit:4.12'
	testCompile	 ('org.apache.jmeter:ApacheJMeter_junit:2.13'){
		 exclude group: 'commons-math3', module: 'commons-math3'
		 exclude group: 'commons-pool2', module: 'commons-pool2'
	}
}


jar {
    baseName moduleName
    version moduleVersion
	manifest {
        attributes 'packageName': moduleName, 'Built-By': builtBy,'create-date': new Date().format('yyyy-MM-dd HH:mm:ss')
    }
}

task copyFiles << {
	copy{
			from configurations.compile
			into "$buildDir/testlibs"
	}
}

task testJar(type:Jar){
	dependsOn copyFiles
	version moduleVersion
	baseName moduleName
	from sourceSets.main.output
	from sourceSets.test.output
	destinationDir file("$buildDir/testlibs")
 
//    from (configurations.compile.collect { it.isDirectory() ? it : zipTree(it)  }){
//
//    }
//    with jar
	manifest {
		attributes 'packageName': moduleName, 'Built-By': builtBy,'create-date': new Date().format('yyyy-MM-dd HH:mm:ss')
	}
}


